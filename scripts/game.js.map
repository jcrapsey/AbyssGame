{
  "version": 3,
  "file": "game.js",
  "sources": [
    "lib/game.js",
    "lib/scenes/development.js",
    "lib/scenes/loading.js",
    "lib/systems/devControl.js",
    "lib/systems/scaleRender.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G",
  "sourcesContent": [
    "CollisionType =\n{\n  NONE:0x0000, // BIT MAP\n  BULLETS:0x0001, // 0000001\n  ENEMY:0x0002, // 0000010\n  FRIENDLY:0x0004, // 0000100\n  WALL:0x0008\n};\n\nAbyss = pc.Game.extend('Abyss',\n  {},\n  {\n    loadingScene: null,\n    loadingLayer: null,\n    soundManager: null,\n\n    init: function(){\n      this._super();\n      pc.device.scale = 5;\n      pc.device.scaledCanvas = document.getElementById(\"pcGameCanvasScale\");\n    },\n\n    onReady:function ()\n    {\n      this._super();\n      pc.device.onResize(this.onResize);\n\n      // load resources\n      pc.device.loader.setDisableCache();\n      pc.device.loader.add(new pc.DataResource('DevMap', 'assets/maps/DevMap.tmx'));\n      pc.device.loader.add(new pc.Image('DevTiles8', 'assets/tiles/DevTiles8.png'));\n      pc.device.loader.add(new pc.Image('StarTiles128', 'assets/tiles/StarTiles128.png'));\n\n      if (pc.device.soundEnabled)\n      {\n      }\n\n      this.loadingScene = new LoadingScene();\n      this.addScene(this.loadingScene);\n      pc.device.loader.start(this.onLoading.bind(this), this.onLoaded.bind(this));\n    },\n\n    onLoading: function(){\n      this.loadingScene.onLoading.apply(this.loadingScene, arguments);\n    },\n\n    onLoaded: function(){\n      this.loadingScene.onLoaded.apply(this.loadingScene, arguments);\n\n      this.gameScene = new DevScene();\n      pc.device.game.addScene(this.gameScene);\n    },\n\n    onResize: function(){\n      pc.device.scaledCanvas.width = pc.device.canvasWidth * pc.device.scale;\n      pc.device.scaledCanvas.height = pc.device.canvasHeight * pc.device.scale;\n      pc.device.scaledCtx = pc.device.scaledCanvas.getContext('2d');\n      pc.device.scaledCtx.scale(pc.device.scale, pc.device.scale);\n      pc.device.scaledCtx.imageSmoothingEnabled = false\n      //pc.device.ctx.imageSmoothingEnabled = false;\n      //pc.device.scale = 5;\n      //pc.device.ctx.scale(5,5);\n    },\n\n    process: function(){\n      this._super();\n      pc.device.scaledCtx.clearRect(0, 0, pc.device.scaledCanvas.width, pc.device.scaledCanvas.height);      \n      pc.device.scaledCtx.drawImage(pc.device.canvas, 0, 0);\n    }\n});",
    "DevScene = pc.Scene.extend('DevScene',\n  { },\n  {\n    gameLayer:null,\n    init:function ()\n    {\n      this._super();\n      this.loadFromTMX(pc.device.loader.get('DevMap').resource, new pc.EntityFactory());\n\n      this.tileLayer = this.get('Main');\n      this.gameLayer = this.get('entity');\n      this.gameLayer.setZIndex(20);\n\n      this.tileLayer.setOriginTrack(this.gameLayer);\n\n      // entities\n      var targetEntity = pc.Entity.create(this.gameLayer);\n      targetEntity.addComponent( pc.components.Spatial.create({ x:0, y:0, w:3, h:3 }) );\n      targetEntity.addComponent( pc.components.Rect.create({ color:'#ff2222' }) );\n      targetEntity.addComponent( pc.components.Physics.create({\n                            maxSpeed:{x:24, y:150},\n                            friction:0.1,\n                            fixedRotation:true,\n                            bounce:0,\n                            mass:1.5,\n                            linearDamping:1,\n                            collisionGroup:1,\n                            collisionCategory:CollisionType.FRIENDLY,\n                            collisionMask:CollisionType.FRIENDLY | CollisionType.ENEMY | CollisionType.WALL}) );\n      this.playerSpatial =targetEntity.getComponent('spatial');\n      console.log(this.playerSpatial);\n      // systems\n      this.gameLayer.addSystem(new DevControlSystem());\n      this.gameLayer.addSystem(new ScaleRenderSystem());\n      this.gameLayer.addSystem( new pc.systems.Physics({\n        gravity: { x:0, y:0 },\n        tileCollisionMap: {\n          tileMap:this.tileLayer.tileMap,\n          collisionCategory:CollisionType.WALL\n        },\n        collisionGroup:0\n      }));\n\n      // components\n      targetEntity.addComponent(\n        pc.components.Input.create({\n          states:[\n            ['up'   , ['UP'   ]],\n            ['down' , ['DOWN' ]],\n            ['left' , ['LEFT' ]],\n            ['right', ['RIGHT']]\n          ]\n        })\n      );\n      console.log(this.gameLayer);\n    },\n\n    process:function ()\n    {\n      if (!pc.device.loader.finished) return;\n      \n      this.gameLayer.setOrigin(\n                this.playerSpatial.getCenterPos().x - (this.viewPort.w / 2),\n                this.playerSpatial.getCenterPos().y - (this.viewPort.h / 2));\n\n      pc.device.ctx.clearRect(0, 0, pc.device.canvasWidth, pc.device.canvasHeight);\n\n      this._super();\n    }\n\n  }\n);\n",
    "LoadingScene = pc.Scene.extend('LoadingScene',\n  { },\n  {\n    percentageComplete:0,\n    loadingLayer:null,\n\n    init:function ()\n    {\n      this._super();\n      this.loadingLayer = new pc.Layer('loading');\n      this.addLayer(this.loadingLayer);\n    },\n\n    process:function ()\n    {\n      var ctx = pc.device.ctx;\n      ctx.clearRect(0, 0, pc.device.canvasWidth, pc.device.canvasHeight);\n      ctx.font = \"normal 50px Times\";\n      ctx.fillStyle = \"#bbb\";\n      ctx.fillText('Abyss', (pc.device.canvasWidth / 2)-61, (pc.device.canvasHeight / 2)-50);\n      ctx.font = \"normal 14px Verdana\";\n      ctx.fillStyle = \"#777\";\n      ctx.fillText('Loading: ' + this.percentageComplete + '%', (pc.device.canvasWidth/2)-51, pc.device.canvasHeight/2);\n      this._super();\n    },\n\n    onLoading:function (percentageComplete)\n    {\n      this.percentageComplete = percentageComplete;\n    },\n\n    onLoaded:function ()\n    {\n    }\n\n  }\n);\n",
    "/**\n* PlayerControlSystem\n* Handle input for the player\n*/\n\nDevControlSystem = pc.systems.Input.extend('PlayerControlSystem', { }, {\n\n  init:function ()\n  {\n    this._super([ 'input' ], 60);\n  },\n\n  onAction: function(){\n    console.log('action?');\n  },\n\n  process:function (entity)\n  {\n    this._super(entity);\n    var isUpState    = this.isInputState(entity, 'up'   );\n    var isDownState  = this.isInputState(entity, 'down' );\n    var isLeftState  = this.isInputState(entity, 'left' );\n    var isRightState = this.isInputState(entity, 'right');\n    var entityPhysics;\n\n    if(isUpState || isDownState || isLeftState || isRightState){\n      entityPhysics = entity.getComponent('physics');\n      if(isUpState){ entityPhysics.applyImpulse(0.4,-90); }\n      if(isDownState){ entityPhysics.applyImpulse(0.4,90); }\n      if(isLeftState){ entityPhysics.applyImpulse(0.4,180); }\n      if(isRightState){ entityPhysics.applyImpulse(0.4,0); }\n    }\n  }\n});",
    "/**\n* PlayerControlSystem\n* Handle input for the player\n*/\n\nScaleRenderSystem = pc.systems.Render.extend('ScaleRenderSystem', { }, {\n  processAll: function(){\n    this._super();\n  }\n});"
  ]
}